
CREATE TABLE public.clients (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"name" varchar(50) NOT NULL,
	phone varchar(30) NOT NULL,
	email varchar(50) NOT NULL,
	CONSTRAINT clients_pkey PRIMARY KEY (id)
);

CREATE TABLE public.restaurants (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	address varchar(50) NOT NULL,
	phone varchar(30) NOT NULL,
	email varchar(50) NOT NULL,
	time_open time NOT NULL,
	time_closed time NOT NULL,
	CONSTRAINT restaurants_pkey PRIMARY KEY (id),
	CONSTRAINT time_closed_greater_than_time_open CHECK ((time_open < time_closed))
);

CREATE TABLE public."tables" (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	internal_id int4 NOT NULL,
	capacity int4 NOT NULL,
	restaurant_id int4 NULL,
	CONSTRAINT tables_pkey PRIMARY KEY (id),
	CONSTRAINT tables_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id) ON DELETE CASCADE
);

CREATE TABLE public.reservations (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"date" date NOT NULL,
	start_time time NOT NULL,
	end_time time NOT NULL,
	client_id int4 NULL,
	table_id int4 NULL,
	CONSTRAINT end_time_greater_than_start_time CHECK ((start_time < end_time)),
	CONSTRAINT reservations_pkey PRIMARY KEY (id),
	CONSTRAINT reservations_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(id) ON DELETE CASCADE,
	CONSTRAINT reservations_table_id_fkey FOREIGN KEY (table_id) REFERENCES public."tables"(id) ON DELETE CASCADE
);


CREATE FUNCTION reservations_check() RETURNS trigger AS $reservations_check$
    BEGIN
        IF NEW.start_time < (select r.time_open from restaurants as r join "tables" as t on t.restaurant_id = r.id where t.id = new.table_id) THEN
            RAISE EXCEPTION 'Reservation start time cannot be earlier than restaurant opening hours!';
        END IF;
       	
       	if new.end_time > (select r.time_closed from restaurants as r join "tables" as t on t.restaurant_id = r.id where t.id = new.table_id) THEN
 			RAISE EXCEPTION 'Reservation end time cannot be later than restaurant opening hours!';
        END IF;
       	if exists(select * from reservations r where r.table_id=new.table_id and r.date=new.date and new.start_time<=r.end_time and r.start_time <= new.end_time) then
			raise exception 'This time is already reserved by another client!';
       	end if;
       	RETURN NEW;
       	END;
$reservations_check$ LANGUAGE plpgsql;

CREATE TRIGGER reservations_check BEFORE INSERT OR UPDATE ON reservations
    FOR EACH ROW EXECUTE PROCEDURE reservations_check();